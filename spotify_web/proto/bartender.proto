package spotify.bartender.proto;

message GroupRequest {
  optional string platform = 1;
  optional int32 request_version = 2;
  optional string language = 3; // Two-letter ISO 639-1 language code.
}

message CategoryData {
  // Id for the category.
  // If this is not empty, use this to request stories for this category
  // Otherwise use stories_uri
  optional string id = 1;
  // Localized name of the category.
  optional string name = 2;
  // List of images of various sizes
  repeated SpotifyImage image = 3;
  // Uri to get the stories, null if we get it from bartender
  optional string stories_uri = 4;
}

message Group {
  repeated CategoryData categories = 1;
  optional string id = 2;
  optional string name = 3;
}

message GroupList {
  repeated Group groups = 1;
}

enum FallbackArtistType { //DEPRECATED
  TYPE_UNKNOWN_FALLBACK = 0;
  TYPE_FOLLOWED_ARTIST = 1;
  TYPE_LOCAL_TRACK_ARTIST = 2;
}

enum RecentArtistType {
  TYPE_UNKNOWN_RECENT_ARTIST = 3;
  TYPE_LISTENED = 4;
  TYPE_FOLLOWED = 5;
  TYPE_LOCAL = 6;
}

message StoryRequest {
  optional string country = 1; // Two-letter ISO 3166-1 country code.
  optional string language = 2; // Two-letter ISO 639-1 language code.
  optional string device = 3; // "unknown", "mobile", "tablet" or "desktop".
  // More device types could be added in the future.

  optional int32 version = 4;

  repeated string fallback_artist = 5; // DEPRECATED

  repeated FallbackArtistType fallback_artist_type = 6;  // DEPRECATED

  repeated string recent_artist = 7;

  repeated RecentArtistType recent_artist_type = 8;

  optional string category_id = 9;

  optional int32 localtime = 10;
}

message StoryList {
  repeated Story stories = 1;

  // Whether this is a page of generic fallback stories (as opposed to a personalized ones).
  optional bool has_fallback = 12;

  optional bool is_last_page = 2;

  optional bool is_employee = 3;
}

enum StoryType {
  TYPE_UNKNOWN_STORY = 0;
  TYPE_RECOMMENDATION = 1;
  TYPE_NEW_RELEASE = 2;
  TYPE_SHARED_ITEM = 3;
  TYPE_CREATED_ITEM = 4;
  TYPE_SUBSCRIBED_TO_ITEM = 5;
  TYPE_FOLLOWED_PROFILE = 6;
  TYPE_SOCIAL_LISTEN = 7;
  TYPE_RECENT_STREAM = 8;
  TYPE_REPRISE = 9;
  TYPE_CURRENT_FAVORITES = 10;
  TYPE_RECENT_ARTIST = 11; // Story based on recent_artist in the request
  TYPE_BLAST_FROM_THE_PAST = 12;
  TYPE_SOCIAL_LISTEN_LOW = 13;
  TYPE_SPONSORED = 15;
}

message Story {
  optional int32 version = 1;

  optional string story_id = 2;

  optional StoryType type = 3;

  optional Reason reason = 4;

  // The actual music item that is being recommended (track, album, artist, etc.).
  optional SpotifyLink recommended_item = 5;

  // The "parent" of the media item, if applicable. For a track, this is the album. For an album,
  // this should be the artist.
  optional SpotifyLink recommended_item_parent = 6; // DEPRECATED

  // An additional image that may come from 3rd-party metadata, like a concert or news photo.
  repeated SpotifyImage hero_image = 8;

  optional Metadata metadata = 9;

  optional RichText reason_text = 10;

  repeated SpotifyImage auxiliary_image = 11;

  optional int32 reason_text_number = 12;
}

message RichText {
  optional string text = 1;
  repeated RichTextField fields = 2;
}

message RichTextField {
  optional string text = 1;
  optional string uri = 2;
  optional string url = 3;
  optional bool bold = 4;
  optional bool italic = 5;
  optional bool underline = 6;
}

enum ReasonType {
  TYPE_UNKNOWN_REASON = 0;
  TYPE_LISTENED_TO = 1;
  TYPE_LISTENED_TO2 = 2; // DEPRECATED
  TYPE_FOLLOW_USER = 3;
  TYPE_FOLLOW_ARTIST = 4;
  TYPE_POPULAR = 5;
  TYPE_BFTP = 6; // Blast from the past, DEPRECATED
  TYPE_LOCAL_ARTIST = 7;
  TYPE_ALGO = 8;
}

message Reason { // DEPRECATED
  optional ReasonType type = 1; // DEPRECATED

  repeated SpotifyLink sample_criteria = 2;

  optional int32 criteria_count = 3;

  repeated ReasonType reason_type = 4;

  repeated int32 date = 5;
}

message SpotifyLink { // Can be any spotify object: track, album, artist, playlist or even user.
  optional string uri = 1;
  optional string display_name = 2;
  optional SpotifyLink parent = 3;
  repeated SpotifyAudioPreview preview = 6;
}

message SpotifyAudioPreview {
  optional string uri = 1;
  optional string file_id = 2;
}

message SpotifyImage {
  optional string uri = 1;
  optional string file_id = 2;
  optional int32 width = 3;
  optional int32 height = 4;
}

enum MetadataType {
  TYPE_UNKNOWN_METADATA = 0;
  TYPE_SPOTIFY_DATA = 1;
  TYPE_REVIEW = 2;
  TYPE_NEWS = 3;
  TYPE_CONCERT = 4;
  TYPE_PLAYLIST = 5;
}

enum ScoreType {
  TYPE_UNKNOWN_SCORE = 0;
  TYPE_FOLLOWER_COUNT = 1;
  TYPE_STAR_RATING = 2;
}

message Metadata {
  // Common data
  optional string id = 1;

  optional string app = 2; // May be spotify

  optional MetadataType type = 3;

  optional string title = 4;

  optional string summary = 5;

  optional string favicon_url = 6;

  optional string external_url = 7;

  optional string internal_uri = 8;

  optional int32 dtpublished = 9;

  optional int32 dtexpiry = 10;

  optional SpotifyLink author = 11;

  repeated int32 score = 12;

  repeated ScoreType score_type = 13;

  optional ConcertData concert_data = 14;

  repeated string item_uri = 15;

  repeated SpotifyImage image = 16; // never returned, only used internally

  optional string bouncer_id = 17;

  repeated string related_uri = 18;

  optional string story_uuid = 19;

  optional SocialReaction reactions = 20;
}

message ConcertData {
  optional int32 dtstart = 1;
  optional int32 dtend = 2;
  optional Location location = 3;
}

message Location {
  optional string name = 1;
  optional string city = 2;
  optional double lat = 3;
  optional double lng = 4;
}

message DiscoveredPlaylist {
  optional string uri = 1;
}

message DiscoverNux {
  optional int32 seen = 1;
}

enum RecLevel {
  REC_LOW = 0;
  REC_MID = 1;
  REC_HIGH = 2;
}

message StoryWithReason {
  optional Story story = 1;

  optional Reason reason = 2;

  repeated string track_uris = 3;

  // Generally speaking, this reflects the recognizability of the reason behind
  // the recommendation; i.e. how likely the user is to recognize X in "Because
  // you listened to X, we thought you'd like Y".
  optional RecLevel level = 4;
}

// This is what's stored within cassandra and memcache
message StoriesWithReasons {
  repeated StoryWithReason stories = 1;
}

// bouncer reactions
message SocialReaction {
    // SocialReaction is part of SocialStory now, no need to duplicate id here.
    optional string id = 1;

    optional UserList likes = 2;
    optional UserList streams = 3;
    optional UserList reshares = 4;
}

message UserList {
    repeated string usernames = 1;
    optional int64 count = 2;

    // whether the complete list includes the requesting user
    // if set to true, "usernames" field will not include the requesting user
    optional bool include_requesting_user = 3;
}
